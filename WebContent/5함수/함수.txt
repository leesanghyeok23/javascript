함수란?
- 어떤 목적을 가지고 작성한 코드를 모아 둔 블록문입니다
- 코드를 함수로 만들면 함수를 호출해 함수 내부에 모아둔 여러줄의 코드를
  한번에 실행할수 있습니다. 
  그래서  여러곳에서 재사용하기가 매우 편합니다.

구구단 3단 출력하는 코드
    gugudan_console.html 파일 생성 및 실습 


함수를 만드는(정의하는) 방법
- 자바스크립트에서 함수는  함수 선언문, 함수 표현식, 화살표 함수를 사용해서 정의할수 있음

------------------------------------------------------------------------------

함수 선언문으로 함수 정의하기 
방법 : function키워드로 함수를 정의 하는 방법입니다.
      function키워드 다음에 함수를 식별할수 있도록 함수명(식별자)를 붙이면됩니다.

      함수 정의 문법
      
      	function 함수명(){
      	
      		//함수기능 작성하는 코드로 작성하는 영역
      	
      	}
     
함수를 정의하고 나면 함수의 식별자(함수명)과 소괄호를 열었다가 닫아주는 형식으로
함수를 호출해서  함수명()옆에 붙은 {}중괄호 사이의 코드를 실행할수 있음

       함수 호출 문법
       
       		함수명();

---------------------------------------------------------------------------------

함수 표현식으로 함수 정의 하기
방법 : 함수도 상수메모리에 할당해서 저장할수 있는데,
          이를 이용한 함수 정의 방법을 함수표현식이라고 합니다.

          함수표현식은 상수메모리에 할당하는 함수에 함수명이 있으면 네이밍함수,
                            상수메모리에 할당하는 함수에 함수명이 없으면 익명함수로 다시 구분된다

      문법
            const 상수명 = function(){  //익명함수 

      				함수 기능을 코드로 작성;

			};

            const 상수명 = function 함수명(){ //네이밍 함수 

              		함수 기능을 코드로 작성;

            };

    함수 호출 문법
                    변수명();


          ------------------------->   naming_func.html 파일 만들기 

-----------------------------------------------------------------------------------

화살표 함수로 함수 정의하기
방법 : 화살표 함수는 ES6버전에서 추가된 함수정의 방법으로,
       화살표를 사용해 함수를 정의하는 방법

      화살표 함수 정의  문법
      					
			              const 상수명 = () => {
			
			                  		함수기능을 코드로 작성;
			
			              };

      함수 호출 문법

          				    상수명();

    --------------------------------> arrow_func.html 파일 만들기 


----------------------------------------------------------------------------


매개변수와 인수 

    매개변수를 포함해 함수를 정의하는 기본 문법

      1. 함수 선언문 이용

          function 함수명(매개변수1, 매개변수2, 매개변수3){  함수기능을 코드로작성;      }
                        num1,     num2,       num3


      2. 함수 표현식 이용

          const 상수명 = function 네이밍함수명(매개변수1, 매개변수2){ 함수기능을 코드로작성; };
                                           num1  ,  num2 

      3. 화살표 함수 이용 

          const 상수명 = (매개변수1, 매개변수2) => { 
            
            		매개변수1,2를 사용하여 함수의 기능을 코드로 작성; 
            
          };



      함수 호출 문법

            1.  함수명(인수1, 인수2);

            2.3.  상수명(인수1, 인수2);


      -------------------------->  gugudan.html 파일 만들기 


------------------------------------------------------------------------------
매개변수의 특징

	명명규칙
		매개변수는 일반적으로 변수와 같다고 생각하면됩니다.
		변수의 특징을 그대로 가지고 있으므로 매개변수의 이름도 변수의 이름 명명규칙에 따라
		지어주면 됩니다.
	
	데이터 전달
		함수의 매개변수에 데이터가 전달되는 과정은 함수를 정의할때 함께 정의한 매개변수는
		함수 호출시 전달되는 데이터와 일대일 대응되어 데이터가 할당됩니다.
		따라서 첫번째 인수는 첫번째 매개변수에 할당되고,
		두번째 인수는 두번째 매개변수에 할당됩니다.
		
		function sum(첫번째매개변수,두번째매개변수){}	

		sum(10,20);

	    중요!!!!
	    함수의 매개변수는 함수 호출시 전달되는 데이터가 기본으로 할당되지만,
	    함수를 호출할때 데이터를 전달하지 않는다고 해서 오류가 발생하지 않습니다.
	    변수를 선언하고 값을 할당하지 않으면 undefiend값으로	초기화 되는 것 처럼
	    매개변수도 함수 호출시 데이터를 전달하지 않으면 undefiend값이 할당되어
	    코드를 실행해도 오류가 발생하지 않습니다.
	    
	    function sum(num1, 			num2){						}
	    			 undefiend		undefiend
	    sum();  


		중요!!!!
		함수를 호출할때 데이터를 전달하지만, 매개변수가 정의 되지 않은 경우에는 어떻게 될까?
		
			function sum(){        }		
			
			sum(10,20);
			
		이또한 오류는 발생하지 않지만, 전달한 데이터를 받을 매개변수가 없어서
		값을 전달해도 사용할수없습니다.


		중요!!!
		화살표 함수에서 매개변수를 정의하는 방법 
			
			const sum = (num1,num2) => {
				
				console.log(num1,num2);
			
			};	

			sum(10,20); //함수 호출

		단, 화살표 함수는 매개변수가 1개일 경우 ()를 생략할수 있습니다.(있어도 상관없습니다)
		
			const sum = num1 => {
			
				console.log(num1);
			
			};
			
			sum(10); //함수 호출
			
	기본값 할당
		앞에서 매개변수를 정의하고 데이터를 전달하지 않으면 매개변수에는 undefiend값이
		자동으로 할당된다고 했습니다. 
		그런데 ES6에서 기본값을 지정하는 방식이 추가되었습니다.
		그래서 이제는 매개변수에 직접 데이터를 할당하는 방식으로 단순하게 기본값을 
		지정할수 있습니다.
		
		prameter_default.html 파일 만들어 아래 코드를 실험 해보세요 
		
		function sum(a=10, b=10){
			console.log(a,b);
		}		
			
		sum(); //함수 호출 	
------------------------------------------------------------------------------

return 문
	-  함수를 호출할 때 데이터를 전달하려면 매개변수를 정의해야 하듯이
	   함수 외부로 데이터를 반환할떄는 return문을 사용해야 합니다.
	   
	 	문법
	 		return 식 또는 값;
	
	
		add_func.html 파일 만들기 
			
	-  또한, return문은 데이터를 반환하지 않으면 단순히 함수 실행을 종료하는 역할만 하게 됩니다
	
		문법
			return;
			
		return_exit.html 파일 만들기 

----------------------------------------------------------------------------

function 키워드를 사용한 함수 만들기 문제

	function.html 


화살표 함수를 사용한 함수 만들기 문제 

	arrow_function.html
		

----------------------------------------------------------------------------

참고.  함수를 정의하는 세가지 방법  비교

        1. 함수선언문 function 함수명(){} 으로 정의하는 방법

            - 함수를 정의한 줄 위나 아래에서 어디서 든지 호출이 가능합니다.
		              이유는 정의되어 있는 함수는 호이스팅되어 
		              함수 정의 구문 줄 위에서도 호출이 가능합니다.


              console.log( add1(2,3) );  //5


              function add1(a, b){   //<------- 함수 선언문 방법으로 함수 정의
                  return a + b;
              }
              
              

        2.  함수 표현식 2가지 방법 (익명함수, 네이밍함수)
           
             - 호이스팅 없음 

                add2(2,3);  //함수 호출시 오류 발생
                            //함수는 상수에 할당된 후에야 호출할수 있습니다.
                            //정의되기 전에 호출하면 오류가발생합니다.


                 const add2 = function(a, b){

                    return a + b;

                 };

                 console.log( add2(2,3) ); // 5  함수 정의 줄 밑줄에서 호출 가능 


        3.  화살표 함수로 함수를 정의 하는 방법

            - 호이스팅 없음
            - 상수메모리에 할당된 후에야 호출할수 있으며,
                            간결한 문법과 주변 스코프의 this를 사용하는 특징이 있습니다.


              add3(2,3);  //오류 발생!  add3 is not defined

              const add3 = (a,b) => a + b;

              console.log( add3(2,3) );  // 5


---------------------> 함수선언문으로 정의한 함수 정의 방법과 매개변수 처리 방법 
                       function_1.html 만들기

---------------------------------------------------------------------------------------



배열 배우고 나중에~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



1분 퀴즈.   getArrayMaxNumber.html 파일 만들기 
	
		코드에서 max변수의 출력값이 배열 중 가장 큰 숫자가 될수 있도록
		getArrayNumber()함수를 완성하시오.
		이때 배열 요소는 반드시 숫자형이라고 가정합니다.
		
		function getArrayMaxNumber(arr){
			/*함수 코드를 완성하세요*/
			
		}

		const max = getArrayMaxNumber([10, 50, 30]); //함수 호출 구문
		
		console.log(max);



---------------------------------------------------------------------------------------

함수의 특징 이해하기

	스코프
	- 변수나 함수와 같은 참조대상 식별자를 찾아내기 위한 규칙입니다.
	  자바스크립트는 기본으로 스코프에 따라 참조하려는 식별자를 찾습니다.
	- 자바스크립트의 스코프는 함수 스코프 방식이냐, 블록 스코프방식이냐 따라
	  전역 스코프와 지역 스코프의 참조범위가 달라집니다.
	  
	함수 스코프 방식?
	- 함수 스코프는 함수에서 정의한 블록문만 스코프의 유효범위를 인정하는 방식입니다.
	  결국 함수 내부는 지역스코프, 함수 외부는 전역스코프 영역이 됩니다.
	  

	 ------------------------------------> 예제. global.html 파일만들기 			
			
	블록 스코프 방식?
	- 자바스크립트 ES6버전 이상에서 let, const키워드가 추가되면서 블럭 스코프도 지원하게 되는데,
	  블록스코프는 { }로 구성된 블록문을 기준으로 스코프의 유효범위를 나누는 방식입니다.
	  단, 이방식은 let과 const키워드로 선언한 변수에 한해서만 적용 됩니다.
	  
	 ------------------------------------> 예제. block_scope.html 파일만들기 
	 ------------------------------------> 예제. block_scope2.html 파일만들기
			
			
	참조 우선순위?
	- let, const 키워드는 같은 식별자의 중복선언이 불가능합니다.
	  (변수이름을 같은이름으로 여러개 만들어 놓을수 없다)
	  하지만 정확하게는 같은 스코프영역에서 중복선언이 불가능 하다고 할수 있습니다.
	  
	  ------------------------------------> 예제. reference.html 파일만들기 	
		
	함수 호이스팅?
	- 호이스팅은 코드를 선언과 할당으로 분리해 선언부를 자신의 스코프영역중에 최상위로 끌러 올리는것을 말합니다.
	
	 //var로 선언한 변수의 호이스팅 예 
	 2
	 					최상단으로 끌어 올리는것  (호이스팅)
	    //var num;      <<<<<<<------|  
				                     |
		console.log(num);  <- 할당       |
	                                 |
		var num = 10;	//<- 변수 선언  |	
		
				
	설명 :   위 코드에서 오류가 발생할것 같지만 호이스팅에 의해 num변수값을 출력됩니다. 
			var키워드로 선언한 변수에만 적용되고 let과 const키워드로 선언한 변수에는 적용 되지 않습니다.
			그리고 함수도 호이스팅 됩니다.
			
	 ------------------------------------> 예제. hoisting_func.html 파일 만들기 
	 ------------------------------------> 예제. hoisting_express.html 파일 만들기	
			
	
	즉시 실행함수 사용하기
	- 즉시 실행함수란? 함수를 정의하면서 동시에 호출해서 실행하기 하는 함수 입니다.
	- 문법
		   (function(){})();
	
		   -------------------------------------------------
		  
		   (function(){
		   
		   		//함수 기능 코드로 작성 
		   
		   })();//함수 호출!
	
------------------------------------>	예제. llFE.html 파일 만들기 
	
-------------------------------------------------------------------------------------


1분 퀴즈
다음 코드를 실행하면 출력될 변수 result의 값을 고르세요.

const result = (function(a, b){

  function init(){
    return doSum(a, b);
  }

  function doSum(a, b){
    return a + b;
  }

  return init();
	
})(10, 20);

console.log(result);

① undefined
② null
③ 50
④ 30
⑤ SyntaxError


즉시 실행 함수 (IIFE): (function(a, b){ ... })(10, 20) 부분은 즉시 실행 함수입니다. 이 함수는 10과 20을 인자로 받아 실행됩니다.
init 함수: 이 함수는 doSum(a, b)를 호출하여 a와 b의 합을 반환합니다.
doSum 함수: doSum 함수는 두 인자를 받아서 그 합을 계산하여 반환합니다.
이제 값을 추적해보면:

a는 10이고, b는 20입니다.
init()이 호출되면 doSum(10, 20)이 실행되고, 결과는 10 + 20 = 30이 됩니다.
최종적으로 init()이 반환하는 값인 30이 result에 할당됩니다.
따라서 console.log(result);는 30을 출력하게 됩니다.

결론적으로, 정답은 ④ 30입니다.

-----------------------------------------------------------------------------------
1. 원의 넓이를 구하는 공식은 (반지름) × (반지름) × (원주율)입니다. 원주율은 3.14라고 했을 때, 
   원의 반지름을 이용해 원의 넓이를 반환하는 함수를 만들어 보세요.

	 function getCircleArea(radius){
 		 return radius * radius * 3.14;
	 }
	 
	 const area = getCircleArea(10);
	 console.log(`원의 넓이: ${area}`);


2. 매개변수로 배열을 전달받아 배열의 요소 중에서 
   가장 큰 수를 찾아 반환하는 함수를 만들어 보세요. 
   이때, 배열 안의 데이터는 모두 0보다 큰 정수라고 가정합니다.

 	function getOrderDesc(arr){
												//[10, 20, 100, 30, 40]
	  let result = 0;
	  
	  for(let i = 0; i < arr.length; i++){
	  
	    const currentNumber = arr[i];
	    
	    if(result < currentNumber){
	    
	      result = currentNumber
	    }
	  }
	  return result;
	}
	
	const result = getOrderDesc([10, 20, 100, 30, 40]);
	console.log(result);
 
 
 

3. 체질량 지수(BMI)를 계산하는 공식은 몸무게를 키(m)의 제곱으로 나눈 값입니다. 
   사용자에게 키(cm)와 몸무게(kg)에 해당하는 값을 전달받아 체질량 지수를 계산합니다. 
   체질량 지수가 26점 이상이면 비만, 24~25점은 과체중, 
   18.5~23점은 정상, 18.5점 미만은 저체중을 반환하는 함수를 만들어 보세요.	
	
힌트)	
	 키는 cm 단위로 전달받기 때문에 m 단위로 변환하기 위해 100으로 나눕니다. 이후 문제에 주어진 BMI 공식에 따라 키를 제곱하고 이 값으로 몸무게를 나누어서 BMI를 구합니다. 
	 마지막으로 조건문을 사용해 조건(BMI 점수)에 따른 결과를 반환하게 작성하면 됩니다.
	
	
	// 체질량 BMI 구하기
	function getBMI(height, weight){

	  const h = height / 100; // m 단위 변환

	  const bmi = weight / (h * h);

	  if(bmi > 25) return "비만";

	  else if(bmi > 24 && bmi <= 25) return "과체중";

	  else if(bmi > 18.5 && bmi <= 23) return "정상";

	  else return "저체중";
	}
	
	const bmi = getBMI(180, 70);
	
	console.log("bmi: " + bmi);
	