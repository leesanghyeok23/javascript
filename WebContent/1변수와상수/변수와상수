메모리?

컴퓨터 메모리는 데이터를 저장하기 위한 하드웨어로,
컴퓨터가 명령을 실행하는데 필요한 데이터들이 저장되는 하드웨어 공간이다.
메모리는 데이터를 저장할 수 있는 메모리 셀(cell)로 구성되어 있다.

memory.png 이미지 참고.

- 메모리의 한칸(셀)에는 각각 모든 데이터를 0과 1로 저장합니다.
- 메모리의 한칸(셀)의 크기는 1bit이고 8개칸(셀)이 모이면 8bit  8bit는 1byte메모리의 크기라고 부른다
   [0][1][1][1][0][1][0][0]
bit 1  1   1 1  1  1  1  1      8bit = 1byte 크기의 메모리 

-  각 1byte(8bit)의 크기와  메모리 주소값들을 가집니다.
   메모리 주소 값은 0x로 시작하는 16진수가 컴퓨터에 의해 자동으로 부여 된다.


  참고. 컴퓨터에 데이터는 다양한 크기의 단위로 저장됩니다.
        이단위들은 매우작은 단위는 bit(비트)에서 시작하여 점점 더큰 byte(바이트) 및
        그이상의 단위로 확장해서 저장시킵니다.
        1bit-> 8bit(1byte) -> 1024byte(1KB)       1024KB(1MB)  1024MB(1GB)  1024GB(1TB)
        bit ->  byte ->           KB ->          MB ->       GB ->          TB

         1. 비트 (Bit)
            - 정의 : 컴퓨터의 가장 작은 데이터 단위
            -  값  : 0 또는 1 두가지 값을 가질수 있습니다.
            -  예시 : 스위치가 꺼진상태(0) 또는 켜진 상태(1)
    
            메모리 예시.  1바이트(8비트)
        
             0  1 0 1 1 0 0 1

         2. 바이트 (Byte)
            - 정의  : 8비트로 구성된 데이터 단위 =  1byte
            - 값 :  0 부터 255까지의 값을 표현할수 있다.( 2의 8승 = 256)
            - 예시 :  하나의 문자 (예:  'A'는 65  ,  'a'는 97)

               4바이트 (32비트)

               0 1 0 1 1 0 0 1   0 1 0 1 1 0 0 1    0 1 0 1 1 0 0 1    0 1 0 1 1 0 0 1  



         3. 킬로바이트 (KB)
            - 정의 : 1024 바이트 = 1KB
            -  값 : 약 1,204 byte ( 2의 10승 byte)
            -  예시 : 작은 텍스트파일
         
         4. 메가바이트  (MB)
            - 정의 : 1024킬로바이트 = 1MB
            - 값 : 약 1,048,576 bytes (1024 * 1024 bytes) 
            - 예시 : 고 해상도 사진 한장

            메모리 예시 
                  512MB의 일부 (첫 64비트)

                  00000000 00000000 00000000 00000000  00000000 00000000 00000000 00000000
                  00000001 00000010 00000011 00000100  00000101 00000110 00000111 00001000


         5. 기가바이트 (GB)
            - 정의  :  1024 메가바이트 = 1GB
            - 값 : 약 1,073,741,824 bytes ( 1024 * 1024 * 1024 bytes)
            - 예시  : 영화 한편
         
         6. 테라바이스 (TB)
            - 정의 : 1024기바이트 = 1TB
            - 값 : 약 1,099,511,627,776 bytes ( 1024 * 1024 * 1024 * 1024 bytes )
            - 예시 : 대형 데이터베이스 

------------------------------------------------




변수란 무엇인가요?
- 변수는 컴퓨터가 데이터를 잠시 보관하는 메모리의 특정 주소 공간입니다.
- 예를 들어, 물건을 넣는 상자처럼, 변수는 데이터를 넣어둘 수 있는 공간입니다.
- 중요한 점은, 변수에는 한 번에 하나의 데이터만 들어갈 수 있습니다.
- 새로운 데이터를 넣으면, 이전 데이터는 사라집니다.

쉽게 예를 들어볼게요:
 var 상자;
  상자 = "사과"; 
  상자 = "바나나";
       
  이 코드를 보면:
  1. '상자'라는 이름의 변수를 만들었습니다.
  2. 그 상자에 "사과"를 넣었습니다.
  3. 나중에 "바나나"를 넣으니, "사과"는 사라지고 "바나나"만 남습니다.
  실제 상자에 새로운 물건을 넣으면 이전 물건을 빼야 하는 것과 비슷합니다!



변수에는 어떤 것들을 저장할 수 있나요?
- 글자 (예: "안녕하세요", "홍길동")
- 숫자 (예: 1, 100, -5, 3.14)
- 참/거짓 (true, false)
- 그 외 여러 가지 데이터




변수를 어떻게 만드나요? (변수 선언)
1. var로 만들기
   var 이름;
   var 나이;
   var 점수;

2. let으로 만들기 (더 안전한 방법)
   let 이름;
   let 나이;
   let 점수;



var와 let의 차이점:
1. var의 단점:

   - 동일한 이름으로 여러 번 변수를 선언할 수 있어 실수할 가능성이 큽니다.
   예) var 점수 = 80;
       var 점수 = 90; // 동일한 이름으로 다시 선언 가능 (위험!)
       
   - 호이스팅(hoisting) 때문에 예기치 않은 결과가 발생할 수 있습니다.
     호이스팅은 자바스크립트에서 변수를 선언하기 전에 사용할 수 있게 하는 특성입니다.
     즉, 코드 실행 전에 변수 선언이 코드의 맨 위로 이동된 것처럼 작동합니다.
     예를 들어, 아래 코드를 보세요:
     
     // var로 변수를 선언하면, 자바스크립트는 해당 변수를 코드의 맨 위로 끌어올립니다.
     // 이를 '호이스팅(hoisting)'이라고 합니다.
     // 하지만 실제로 변수의 값은 끌어올려지지 않고, 선언만 끌어올려집니다.
     // 그래서 변수를 선언하기 전에 그 변수를 사용하면, 값이 정의되지 않은 상태(undefined)로 출력됩니다.
     
     console.log(점수); // undefined 출력 (변수 선언이 끌어올려진 것처럼 작동)
     var 점수; // 변수 선언이 실제로는 여기 있지만, 자바스크립트는 이 선언을 코드의 맨 위로 끌어올립니다.
         점수 = 80; // 변수에 값을 할당합니다.


2. let의 장점:
   - 동일한 이름으로 두 번 선언할 수 없어 실수를 방지할 수 있습니다.
   
   예) let 점수 = 80;
     let 점수 = 90; // 오류 발생! (안전!)

   - 호이스팅이 발생하지 않아 코드가 더 예측 가능하고 안전합니다.
     예) 
     console.log(점수); // 오류 발생 (변수 선언 전에 사용 불가)
     let 점수 = 80;





변수 이름을 지을 때 따라야 할 규칙과 그에 대한 설명

1. **영어로 시작하기 (한글 사용 금지)**:
   - 변수 이름은 반드시 영어 알파벳 문자로 시작해야 합니다. 이는 대부분의 프로그래밍 언어에서 요구하는 규칙입니다.
   - 예를 들어, `userName`은 올바른 변수 이름이지만, `사용자이름`은 올바르지 않습니다.

2. **숫자로 시작하면 안 됩니다**:
   - 변수 이름은 숫자로 시작할 수 없습니다. 숫자로 시작하는 경우, 컴파일러나 인터프리터가 이를 변수로 인식하지 못할 수 있습니다.
   - 예를 들어, `1stPlace`는 잘못된 변수 이름이지만, `firstPlace`는 올바른 변수 이름입니다.

3. **특수문자는 `_`와 `$`만 사용 가능**:
   - 변수 이름에 사용할 수 있는 특수문자는 밑줄(`_`)과 달러 기호(`$`)뿐입니다.
   - 이 특수문자들은 변수 이름의 시작이나 중간에 사용할 수 있습니다.
   - 예를 들어, `_privateVar`나 `$dollarAmount`는 올바른 변수 이름입니다.

			   
4. **의미 있는 이름으로 짓기**:
   - 변수 이름은 그 변수가 무엇을 나타내는지 명확하게 설명할 수 있어야 합니다. 이는 코드의 가독성을 높이고, 다른 개발자들이 코드를 이해하는 데 도움을 줍니다.
   - 좋은 예: `userName`, `userAge`, `totalScore` 등은 변수의 목적을 명확히 나타냅니다.
   - 나쁜 예: `a`, `b`, `x1`, `x2` 등은 변수의 목적을 알 수 없게 만듭니다.


### 추가 팁

- **카멜 표기법(Camel Case)**: 여러 단어로 이루어진 변수 이름은 카멜 표기법을 사용하여 각 단어의 첫 글자를 대문자로 표기합니다. 
   예: `totalScore`, `userAge`.

- **일관성 유지**: 코드 전반에 걸쳐 변수 이름을 짓는 방식에 일관성을 유지하는 것이 중요합니다. 
                  이는 코드의 가독성을 높이고 유지보수를 쉽게 만듭니다.

이러한 규칙을 따르면, 코드의 가독성과 유지보수성이 크게 향상됩니다. 
변수 이름은 코드의 중요한 부분이므로 신중하게 선택하는 것이 좋습니다.


실습해볼 파일:
- 변수.html 
- 변수2.html
- 변수3.html  (연습)

-------------------------------------------------------------------------

상수란 무엇인가요?
- 상수는 변수와 비슷하지만, 한 번 값을 저장하면 바꿀 수 없는 공간입니다.
- 도장을 찍은 것처럼, 한 번 저장한 값은 변하지 않습니다.

상수 만드는 방법:
const 상수이름 = 저장할값;

예시:
const 생일 = "2000년 1월 1일"; // 생일은 바뀌지 않으므로 상수로!
const 원주율 = 3.14159;        // 원주율은 항상 같으므로 상수로!

상수 이름 규칙:
- 변수와 비슷하지만 더 엄격합니다
- _와 $ 외의 특수문자는 사용 불가
- 의미 있는 이름으로 짓기

실습파일:
- 상수.html
- 상수2.html






